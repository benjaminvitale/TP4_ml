import metrics as md

def grid_search_best_hyperparameters(model,x_train,x_dev,y_dev, epochs_list,lr_list):
    """
    Finds the best hyperparameters for the MLP model using grid search.
    Inputs:
        training_data: List of tuples (features, targets) for training.
        val_data: List of tuples (features, targets) for validation.
        epochs_list: List of possible values for the number of epochs.
        layers_list: List of possible layer configurations (list of lists of layer sizes).
        lr_list: List of possible learning rates.
        mini_batch_size: Number of samples per mini-batch.
    Returns:
        best_params: Dictionary with the best combination of epochs, layers, and learning rate.
        best_val_loss: Validation loss for the best hyperparameters.
    """
    best_val_loss = float('inf')
    best_params = None
    
    for epochs in epochs_list:
            for lr in lr_list:
                # Create the model with the current hyperparameters
                model.train(x_train,epochs,lr)
                y_pred = model.predict(x_dev)

                
                
                final_val_loss = md.RMSE(y_dev,y_pred)
                
                # Update the best parameters if the current validation loss is lower
                if final_val_loss < best_val_loss:
                    best_val_loss = final_val_loss
                    best_params = {
                        'epochs': epochs,
                        'learning_rate': lr
                    }
                
    
    print(f"\nBest hyperparameters found: {best_params} with Validation Loss: {best_val_loss:.4f}")
    return best_params, best_val_loss
